import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"))
keyboard.add(KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))

# –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
tournaments = [
    {"name": "PUBG Mobile Cup", "date": "10 –º–∞—Ä—Ç–∞", "organizer": "@–¢–≤–æ–π–ö–æ–Ω—Ç–∞–∫—Ç"},
    {"name": "Battle Royale Championship", "date": "15 –º–∞—Ä—Ç–∞", "organizer": "@–¢–≤–æ–π–ö–æ–Ω—Ç–∞–∫—Ç"}
]

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ PUBG Mobile.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
async def list_tournaments(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for t in tournaments:
        text += f"üèÜ {t['name']}\nüìÖ {t['date']}\nüí∞ –û–ø–ª–∞—Ç–∞: {t['organizer']}\n\n"
    text += "–î–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    await message.answer(text)

@dp.message_handler()
async def collect_info(message: types.Message):
    user_info = f"üë§ –ò–≥—Ä–æ–∫: {message.from_user.full_name}\nüî∞ –ù–∏–∫–Ω–µ–π–º: {message.text}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    await message.answer("‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω! –ù–∞–ø–∏—à–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    await bot.send_message(tournaments[0]["organizer"], user_info)

if name == "__main__":
    executor.start_polling(dp, skip_updates=True)